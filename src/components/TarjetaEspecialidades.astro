<div class="bodi">
  <div class="wrapper">
    <i id="left" class="fa-solid fa-angle-left"></i>
    <ul class="carrusel">
     
      <li class="card">
        <img src="/public/img/c2.png" alt="imagen2">
        
      </li>
      <li class="card">
        <img src="/public/img/c1.png" alt="">
      </li>
      <li class="card">
        <img src="/public/img/c2.png" alt="imagen2">
        
      </li>
      <li class="card">
        <img src="/public/img/c1.png" alt="">
      </li>
      <li class="card">
        <img src="/public/img/c2.png" alt="imagen2">
        
      </li>
      <li class="card">
        <img src="/public/img/c1.png" alt="">
      </li>

    </ul>
    <i id="right" class="fa-solid fa-angle-right"></i>
  </div>
</div>

<style>
.bodi {
  display: flex;
  margin: 100px 0;
  padding: 0 35px;
  align-items: center;
  justify-content: center;


}
.wrapper {
  max-width: 1100px;
  width: 100%;
  position: relative;
}
.wrapper i {
  top: 50%;
  height: 50px;
  width: 50px;
  cursor: pointer;
  font-size: 1.25rem;
  position: absolute;
  text-align: center;
  line-height: 50px;
  background: #fff;
  border-radius: 50%;
  box-shadow: 0 3px 6px rgba(0,0,0,0.23);
  transform: translateY(-50%);
  transition: transform 0.1s linear;
}
.wrapper i:active{
  transform: translateY(-50%) scale(0.85);
}
.wrapper i:first-child{
  left: -22px;
}
.wrapper i:last-child{
  right: -22px;
}
.wrapper .carrusel{
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: calc((100% / 3) - 12px);
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  gap: 16px;
  border-radius: 8px;
  scroll-behavior: smooth;
  scrollbar-width: none;
}
.carrusel::-webkit-scrollbar {
  display: none;
}
.carrusel.no-transition {
  scroll-behavior: auto;
}
.carrusel.dragging {
  scroll-snap-type: none;
  scroll-behavior: auto;
}
.carrusel.dragging .card {
  cursor: grab;
  user-select: none;
}
.carrusel :where(.card, .img) {
  display: flex;
  justify-content: center;
  align-items: center;
}
.carrusel .card {
  scroll-snap-align: start;
  height: 342px;
  list-style: none;
  background: #f2790c;
  cursor: pointer;
  padding-bottom: 15px;
  flex-direction: column;
  border-radius: 8px;
}
.carrusel .card .img {
  background: #8B53FF;
  height: 148px;
  width: 148px;
  border-radius: 50%;
}
.card .img img {
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #fff;
}
.carrusel .card h2 {
  font-weight: 500;
  font-size: 1.56rem;
  margin: 30px 0 5px;
}
.carrusel .card span {
  color: #6A6D78;
  font-size: 1.31rem;
}
@media screen and (max-width: 900px) {
  .wrapper .carrusel {
    grid-auto-columns: calc((100% / 2) - 9px);
  }
}
@media screen and (max-width: 600px) {
  .wrapper .carrusel {
    grid-auto-columns: 100%;
  }
}
</style>

<script>

const wrapper = document.querySelector(".wrapper");
const carrusel = document.querySelector(".carrusel");
const firstCardWidth = carrusel.querySelector(".card").offsetWidth;
const arrowBtns = document.querySelectorAll(".wrapper i");
const carruselChildrens = [...carrusel.children];
let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;
// Get the number of cards that can fit in the carrusel at once
let cardPerView = Math.round(carrusel.offsetWidth / firstCardWidth);
// Insert copies of the last few cards to beginning of carrusel for infinite scrolling
carruselChildrens.slice(-cardPerView).reverse().forEach(card => {
    carrusel.insertAdjacentHTML("afterbegin", card.outerHTML);
});
// Insert copies of the first few cards to end of carrusel for infinite scrolling
carruselChildrens.slice(0, cardPerView).forEach(card => {
    carrusel.insertAdjacentHTML("beforeend", card.outerHTML);
});
// Scroll the carrusel at appropriate postition to hide first few duplicate cards on Firefox
carrusel.classList.add("no-transition");
carrusel.scrollLeft = carrusel.offsetWidth;
carrusel.classList.remove("no-transition");
// Add event listeners for the arrow buttons to scroll the carrusel left and right
arrowBtns.forEach(btn => {
    btn.addEventListener("click", () => {
        carrusel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
    });
});
const dragStart = (e) => {
    isDragging = true;
    carrusel.classList.add("dragging");
    // Records the initial cursor and scroll position of the carrusel
    startX = e.pageX;
    startScrollLeft = carrusel.scrollLeft;
}
const dragging = (e) => {
    if(!isDragging) return; // if isDragging is false return from here
    // Updates the scroll position of the carrusel based on the cursor movement
    carrusel.scrollLeft = startScrollLeft - (e.pageX - startX);
}
const dragStop = () => {
    isDragging = false;
    carrusel.classList.remove("dragging");
}
const infiniteScroll = () => {
    // If the carrusel is at the beginning, scroll to the end
    if(carrusel.scrollLeft === 0) {
        carrusel.classList.add("no-transition");
        carrusel.scrollLeft = carrusel.scrollWidth - (2 * carrusel.offsetWidth);
        carrusel.classList.remove("no-transition");
    }
    // If the carrusel is at the end, scroll to the beginning
    else if(Math.ceil(carrusel.scrollLeft) === carrusel.scrollWidth - carrusel.offsetWidth) {
        carrusel.classList.add("no-transition");
        carrusel.scrollLeft = carrusel.offsetWidth;
        carrusel.classList.remove("no-transition");
    }
    // Clear existing timeout & start autoplay if mouse is not hovering over carrusel
    clearTimeout(timeoutId);
    if(!wrapper.matches(":hover")) autoPlay();
}
const autoPlay = () => {
    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
    // Autoplay the carrusel after every 2500 ms
    timeoutId = setTimeout(() => carrusel.scrollLeft += firstCardWidth, 2500);
}
autoPlay();
carrusel.addEventListener("mousedown", dragStart);
carrusel.addEventListener("mousemove", dragging);
document.addEventListener("mouseup", dragStop);
carrusel.addEventListener("scroll", infiniteScroll);
wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
wrapper.addEventListener("mouseleave", autoPlay);
</script>